{"version":3,"sources":["Constants/Actions.ts","Components/WorkerCard.tsx","Components/CastLibrary.tsx","Actions/Actions.tsx","Assets/Images/bg.jpeg","App.tsx","reportWebVitals.ts","Reducers/Reducer.tsx","index.tsx"],"names":["LOAD_IMAGES_PENDING","LOAD_IMAGES_SUCCESS","LOAD_IMAGES_FAIL","UPDATE_HIRED_WORKERS","REMOVE_WORKER","WorkerCard","worker","index","swiped","Box","sx","position","marginTop","mr","preventSwipe","onSwipe","direction","name","Paper","elevation","p","borderRadius","height","width","backgroundImage","image","backgroundSize","backgroundPosition","display","flexFlow","justifyContent","backgroundColor","borderBottomLeftRadius","borderBottomRightRadius","Typography","mt","fontVariantCaps","color","variant","component","connect","state","workers","getImages","isLoading","error","hiredWorkers","updateWorkers","removedWorkers","dispatch","useDispatch","workerName","type","payload","removeWorker","updateHiredWorkers","renderHiredWorkers","map","m","fontSize","renderWorkers","renderWorkerFinished","Fragment","style","flexDirection","alignItems","textAlign","Container","maxWidth","pb","length","mb","align","overflow","App","useEffect","allWorkers","reqs","word","Promise","resolve","reject","url","axios","method","headers","then","res","data","photos","photo","workerIndividualData","photographer","src","large","push","catch","err","console","log","all","Background","CssBaseline","CastLibrary","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","workersState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"8MAAaA,EAAsB,sBACtBC,EAAsB,sBACtBC,EAAmB,mBACnBC,EAAuB,uBACvBC,EAAgB,gB,yCCyCdC,EA7BI,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,OAC/B,OACK,cAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,SAAU,WAAYC,UAAiB,GAANL,EAAUM,GAAU,IAANN,GAAzD,SACK,cAAC,IAAD,CACKO,aAAc,CAAC,KAAM,QACrBC,QAAS,SAACC,GAAD,OAAeR,EAAOQ,EAAWV,EAAOW,OAFtD,SAGK,cAACC,EAAA,EAAD,CAAOC,UAAW,EAAGT,GAAI,CAACU,EAAG,EAAGC,aAAc,QAA9C,SACK,cAACZ,EAAA,EAAD,CAAKC,GAAI,CACJC,SAAU,WACVW,OAAQ,IAAKC,MAAO,IACpBC,gBAAgB,OAAD,OAASlB,EAAOmB,MAAhB,KACfC,eAAgB,QAChBC,mBAAoB,SACpBC,QAAS,OACTC,SAAU,SACVC,eAAgB,WAChBT,aAAc,QATnB,SAYA,cAACZ,EAAA,EAAD,CAAKC,GAAI,CAACqB,gBAAiB,QAASX,EAAE,EAAGY,uBAAwB,OAAQC,wBAAyB,QAAlG,SACK,cAACC,EAAA,EAAD,CAAYxB,GAAI,CAACyB,GAAI,EAAIC,gBAAiB,cAAeC,MAAO,SAAUC,QAAQ,YAAYC,UAAU,QAAxG,SAAiHjC,EAAOW,kBC0EvIuB,eAFS,SAACC,GAAD,MAA0B,CAACC,QAASD,EAAME,UAAUD,QAASE,UAAWH,EAAME,UAAUC,UAAWC,MAAOJ,EAAME,UAAUE,MAAOC,aAAcL,EAAMM,cAAcD,aAAcE,eAAgBP,EAAMM,cAAcC,kBAErM,KAAzBR,EAzFC,SAAC,GAA8E,IAA5EE,EAA2E,EAA3EA,QAASE,EAAkE,EAAlEA,UAAWC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,aAAcE,EAAkC,EAAlCA,eAEjDC,EAAWC,cAEX1C,EAAS,SAACQ,EAAmBmC,GAC9BF,ECkDoB,SAACE,GAAD,OAAwB,SAACF,GAClDA,EAAS,CACJG,KAAMhD,EACNiD,QAASF,KDrDAG,CAAaH,IACL,UAAdnC,GACEiC,EC0CqB,SAACE,GAAD,OAAwB,SAACF,GACxDA,EAAS,CACJG,KAAMjD,EACNkD,QAASF,KD7CKI,CAAmBJ,KAIhCK,EAAqBV,EAAaW,KAAI,SAACnD,EAAQC,GAChD,OACK,cAAC2B,EAAA,EAAD,CAAwBxB,GAAI,CAACgD,EAAE,EAAGC,SAAU,QAA5C,SAAsDrD,GAArCC,MAIrBqD,GAAiBhB,GAAaF,EAAQe,KAAK,SAACnD,EAAQC,GACrD,OACK,cAAC,EAAD,CAEKA,MAAOA,EACPD,OAAQA,EACRE,OAAQA,GAHHD,MAQdsD,EACD,cAACpD,EAAA,EAAD,CAAKC,GAAI,CAACyB,GAAI,GAAd,SACK,cAACD,EAAA,EAAD,CAAYI,QAAQ,KAAKC,UAAU,KAAK7B,GAAI,CAAC0B,gBAAiB,kBAA9D,+BAKV,OAAIQ,GAAaC,EAEP,cAAC,IAAMiB,SAAP,UACK,eAACrD,EAAA,EAAD,CAAKsD,MAAO,CAAEzC,OAAQ,OAAQM,QAAS,OAAQoC,cAAe,SAAUC,WAAY,SAAUnC,eAAgB,cAA9G,UACK,cAACI,EAAA,EAAD,CAAYxB,GAAI,CAAC0B,gBAAiB,kBAAmBD,GAAI,GAAIG,QAAQ,KAAKC,UAAU,KAApF,6BACA,cAAC9B,EAAA,EAAD,CAAKC,GAAI,CAACkB,QAAS,OAAQC,SAAU,SAAUC,eAAgB,SAAUR,OAAQ,QAAjF,SACK,cAACY,EAAA,EAAD,CAAYxB,GAAI,CAAC0B,gBAAiB,kBAAmBD,GAAI,EAAG+B,UAAW,UAAW5B,QAAQ,KAAKC,UAAU,KAAzG,SAA+GM,WAMrID,EAEO,cAAC,IAAMkB,SAAP,UACK,eAACrD,EAAA,EAAD,CAAKsD,MAAO,CAAEzC,OAAQ,OAAQM,QAAS,OAAQoC,cAAe,SAAUC,WAAY,SAAUnC,eAAgB,cAA9G,UACK,cAACI,EAAA,EAAD,CAAYxB,GAAI,CAAC0B,gBAAiB,kBAAmBD,GAAI,GAAIG,QAAQ,KAAKC,UAAU,KAApF,6BACA,cAAC9B,EAAA,EAAD,CAAKC,GAAI,CAACkB,QAAS,OAAQC,SAAU,SAAUC,eAAgB,SAAUR,OAAQ,QAAjF,SACK,cAACY,EAAA,EAAD,CAAYxB,GAAI,CAAC0B,gBAAiB,kBAAmBD,GAAI,GAAIG,QAAQ,KAAKC,UAAU,KAApF,+BAQpB,cAAC4B,EAAA,EAAD,CAAWC,SAAS,KAApB,SACK,eAAC3D,EAAA,EAAD,CAAKsD,MAAO,CAAEzC,OAAQ,QAASM,QAAS,OAAQoC,cAAe,SAAUC,WAAY,SAAUnC,eAAgB,cAA/G,UACK,cAACI,EAAA,EAAD,CAAYxB,GAAI,CAAC0B,gBAAiB,kBAAmBD,GAAI,GAAIG,QAAQ,KAAKC,UAAU,KAApF,6BACA,cAAC9B,EAAA,EAAD,CAAKC,GAAI,CAACa,MAAO,OAAQK,QAAS,OAAQC,SAAU,SAAUoC,WAAW,SAAUnC,eAAgB,gBAAiBR,OAAQ,OAAQa,GAAI,EAAGkC,GAAI,GAA/I,SACOrB,EAAesB,SAAW5B,EAAQ4B,OAAST,EACxC,eAAC,IAAMC,SAAP,WACMF,EACD,cAACnD,EAAA,EAAD,CAAKC,GAAI,CAACyB,GAAI,IAAd,SACK,cAACD,EAAA,EAAD,CAAYxB,GAAI,CAAC0B,gBAAiB,mBAAoBE,QAAQ,KAAKC,UAAU,KAA7E,4EAKlBO,EAAawB,OAAS,GACnB,eAACpD,EAAA,EAAD,CAAOC,UAAW,EAAGT,GAAI,CAACU,EAAG,EAAGT,SAAU,SAAUW,OAAQ,IAAKiD,GAAI,EAAGhD,MAAO,QAA/E,UACK,cAACW,EAAA,EAAD,CAAYsC,MAAM,SAAlB,oBACA,cAAC/D,EAAA,EAAD,CAAKC,GAAI,CAAEkB,QAAS,OAAQC,SAAU,WAAYC,eAAgB,SAAUmC,WAAY,WAAY3C,OAAQ,IAAMmD,SAAU,UAA5H,SACMjB,eEnGrB,MAA0B,gC,SC+B1BkB,EAvBH,WAEV,IAAMzB,EAAWC,cAMjB,OAJAyB,qBAAU,WACR1B,GFW2B,SAACA,GAC3B,IAII2B,EAAa,GACjB3B,EAAS,CAAEG,KAAMpD,IAEjB,IAAI6E,EAPU,CAAE,QAOCpB,KAAK,SAAAqB,GACjB,OAAO,IAAIC,SAAS,SAACC,EAASC,GACzB,IAAMC,EAAG,iDAA6CJ,GACtDK,IAAMD,EAAK,CACXE,OAAQ,MACRC,QAAS,CAAE,cAXN,8DAaJC,MAAK,SAAAC,GACDP,EAAQO,EAAIC,KAAKC,QACjBF,EAAIC,KAAKC,OAAOhC,KAAM,SAACiC,EAAqDnF,GACvE,IAAIoF,EAAuB,GAG3B,OAFAA,EAAqB1E,KAAOyE,EAAME,aAClCD,EAAqBlE,MAAQiE,EAAMG,IAAIC,MAChClB,EAAWmB,KAAKJ,SAGhCK,OAAM,SAAAC,GACFhB,EAAOgB,GACPC,QAAQC,IAAIF,YAK3BlB,QAAQqB,IAAIvB,GAAMS,MAAK,WAClBrC,EAAS,CACJG,KAAMnD,EACNoD,QAASuB,OAGlBoB,OAAM,SAACC,GACHC,QAAQC,IAAIF,GACZhD,EAAS,CACJG,KAAMlD,EACNmD,QAAS,sCEnDnB,CAACJ,IAGA,eAACkB,EAAA,EAAD,CAAWC,SAAS,KAAK1D,GAAI,CAACc,gBAAgB,OAAD,OAAS6E,EAAT,KAAwB3E,eAAgB,SAArF,UACE,cAAC4E,EAAA,EAAD,IACA,cAACC,EAAD,CACE7D,QAAS,GACTE,WAAW,EACXC,MAAM,GACNC,aAAc,GACdE,eAAgB,SCVXwD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,wCCFRO,EAA2B,CAC5BtE,QAAS,GACTG,MAAO,GACPD,WAAW,GAGVqE,EAA4B,CAC7BnE,aAAc,GACdE,eAAgB,ICFfkE,EAAcC,0BAAgB,CAACxE,UDKnB,WAAoE,IAAnEF,EAAkE,uDAA1DuE,EAAcI,EAA4C,uCAChF,OAAOA,EAAOhE,MACT,KAAKpD,EACA,OAAO,2BAAKyC,GAAZ,IAAmBG,WAAW,EAAMC,MAAO,KAChD,KAAK5C,EACA,OAAO,2BAAKwC,GAAZ,IAAmBG,WAAW,EAAOF,QAAS0E,EAAO/D,UAC1D,KAAKnD,EACA,OAAO,2BAAIuC,GAAX,IAAkBG,WAAW,EAAOC,MAAOuE,EAAO/D,UACvD,QACK,OAAOZ,ICd0BM,cDkB1B,WAAqE,IAApEN,EAAmE,uDAA3DwE,EAAcG,EAA6C,uCACrF,OAAOA,EAAOhE,MACT,KAAKjD,EACA,OAAO,2BAAKsC,GAAZ,IAAmBK,aAAa,GAAD,mBAAML,EAAMK,cAAZ,CAA0BsE,EAAO/D,YACrE,KAAKjD,EACA,OAAO,2BAAIqC,GAAX,IAAkBO,eAAe,GAAD,mBAAMP,EAAMO,gBAAZ,CAA4BoE,EAAO/D,YACxE,QACK,OAAOZ,MCxBhB4E,EAAQC,sBACZJ,EACAK,8BAAoBC,0BAAgBC,OAItCC,IAASC,OACL,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGNO,SAASC,eAAe,SAM1BrB,K","file":"static/js/main.420cd1ef.chunk.js","sourcesContent":["export const LOAD_IMAGES_PENDING = \"LOAD_IMAGES_PENDING\";\nexport const LOAD_IMAGES_SUCCESS = \"LOAD_IMAGES_SUCCESS\";\nexport const LOAD_IMAGES_FAIL = \"LOAD_IMAGES_FAIL\";\nexport const UPDATE_HIRED_WORKERS = 'UPDATE_HIRED_WORKERS'\nexport const REMOVE_WORKER = 'REMOVE_WORKER'","import React from 'react'\nimport { Box } from '@mui/system'\nimport TinderCard from 'react-tinder-card';\nimport { Paper, Typography } from '@mui/material';\n\nexport interface WorkerObj {\n     name: string,\n     image: string\n}\n\nexport interface WorkerCardProps {\n     worker: WorkerObj,\n     index: number,\n     swiped: (...args: any[]) => any\n}\n\nconst WorkerCard = ({worker, index, swiped}: WorkerCardProps) => {\n     return (\n          <Box sx={{position: 'absolute', marginTop: index*.1, mr: index*.25}}>\n               <TinderCard\n                    preventSwipe={['up', 'down']}\n                    onSwipe={(direction) => swiped(direction, worker.name)} >\n                    <Paper elevation={4} sx={{p: 2, borderRadius: '30px'}} >\n                         <Box sx={{\n                              position: 'relative', \n                              height: 200, width: 200, \n                              backgroundImage: `url(${worker.image})`, \n                              backgroundSize: 'cover', \n                              backgroundPosition: 'center',\n                              display: 'flex',\n                              flexFlow: 'column',\n                              justifyContent: 'flex-end',\n                              borderRadius: '25px'\n                         }}\n                         >\n                         <Box sx={{backgroundColor: 'black', p:2, borderBottomLeftRadius: '25px', borderBottomRightRadius: '25px'}}> \n                              <Typography sx={{mt: 2,  fontVariantCaps: 'petite-caps', color: 'white'}} variant='subtitle1' component='label'>{worker.name}</Typography>\n                         </Box>\n                         </Box>\n                    </Paper>\n               </TinderCard>\n          </Box>\n     )\n}\n\nexport default WorkerCard;","import React from 'react'\nimport { connect, useDispatch } from 'react-redux'\nimport { ImageStateP } from '../State/State'\nimport { Box } from '@mui/system'\nimport { Container, Paper, Typography } from '@mui/material'\nimport { updateHiredWorkers, removeWorker } from '../Actions/Actions'\nimport WorkerCard from './WorkerCard'\n\nexport interface WorkersIndividual {\n     name: string,\n     image: string,\n}\n\nexport interface LibraryProps {\n     workers: any[] ,\n     isLoading: boolean,\n     error: string,\n     hiredWorkers: [],\n     removedWorkers: []\n}\n\nconst Library = ({ workers, isLoading, error, hiredWorkers, removedWorkers}: LibraryProps) => {\n\n     const dispatch = useDispatch()\n\n     const swiped = (direction: string, workerName: string) => {\n          dispatch(removeWorker(workerName))\n          if(direction === 'right') {\n               dispatch(updateHiredWorkers(workerName))\n          }\n     }\n\n     const renderHiredWorkers = hiredWorkers.map((worker, index) => {\n          return (\n               <Typography key={index} sx={{m:1, fontSize: '12px'}}>{worker}</Typography>\n          )\n     })\n\n     const renderWorkers = !isLoading && workers.map( (worker, index) => {\n          return ( \n               <WorkerCard\n                    key={index}\n                    index={index}\n                    worker={worker}\n                    swiped={swiped}\n               />\n          )\n     })\n\n     const renderWorkerFinished = (\n          <Box sx={{mt: 5}}>\n               <Typography variant='h4' component='h4' sx={{fontVariantCaps: 'all-small-caps'}}>No More Workers</Typography>\n          </Box>\n     )\n\n\n     if(!isLoading && error) {\n          return (\n               <React.Fragment>\n                    <Box style={{ height: '90vh', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'flex-start'}}>\n                         <Typography sx={{fontVariantCaps: 'all-petite-caps', mt: 4}} variant='h2' component='h1'>Pexel Film Cast</Typography>\n                         <Box sx={{display: 'flex', flexFlow: 'column', justifyContent: 'center', height: '100%'}}>\n                              <Typography sx={{fontVariantCaps: 'all-petite-caps', mt: 1, textAlign: 'center'}} variant='h3' component='h3'>{error}</Typography>\n                         </Box>\n                    </Box>\n               </React.Fragment>\n          )\n     }\n     if(isLoading) {\n          return (\n               <React.Fragment>\n                    <Box style={{ height: '90vh', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'flex-start'}}>\n                         <Typography sx={{fontVariantCaps: 'all-petite-caps', mt: 4}} variant='h2' component='h1'>Pexel Film Cast</Typography>\n                         <Box sx={{display: 'flex', flexFlow: 'column', justifyContent: 'center', height: '100%'}}>\n                              <Typography sx={{fontVariantCaps: 'all-petite-caps', mt: 1}} variant='h3' component='h3'>Loading...</Typography>\n                         </Box>\n                    </Box>\n               </React.Fragment>\n          )\n     }\n\n     return (\n          <Container maxWidth=\"sm\">\n               <Box style={{ height: '100vh', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'flex-start'}}>\n                    <Typography sx={{fontVariantCaps: 'all-petite-caps', mt: 4}} variant='h2' component='h1'>Pexel Film Cast</Typography>\n                    <Box sx={{width: '100%', display: 'flex', flexFlow: 'column', alignItems:'center', justifyContent: 'space-between', height: '100%', mt: 5, pb: 1}}>\n                         { removedWorkers.length === workers.length ? renderWorkerFinished : (\n                              <React.Fragment>\n                                   {renderWorkers}\n                                   <Box sx={{mt: 35}} >\n                                        <Typography sx={{fontVariantCaps: 'all-petite-caps'}} variant='h5' component='h5' >{`<--- Swipe Left To Fire  |  Swipe Right To Hire --->`}</Typography>\n                                   </Box>\n                              </React.Fragment>\n                         ) }\n                    </Box>\n                    { hiredWorkers.length > 0 &&\n                         <Paper elevation={1} sx={{p: 1, position: 'static', height: 300, mb: 4, width: '100%'}}  >\n                              <Typography align='center' >Hired:</Typography>\n                              <Box sx={{ display: 'flex', flexFlow: 'row wrap', justifyContent: 'center', alignItems: 'baseline', height: 150 , overflow: 'scroll'}}>\n                                   {renderHiredWorkers}\n                              </Box>\n                         </Paper>\n                    }\n               </Box>\n          </Container>\n     )\n}\n\nconst mapStateToProps = (state: ImageStateP ) => ({workers: state.getImages.workers, isLoading: state.getImages.isLoading, error: state.getImages.error, hiredWorkers: state.updateWorkers.hiredWorkers, removedWorkers: state.updateWorkers.removedWorkers })\n\nexport default connect(mapStateToProps, null)(Library)","import {\n     LOAD_IMAGES_FAIL,\n     LOAD_IMAGES_PENDING,\n     LOAD_IMAGES_SUCCESS,\n     UPDATE_HIRED_WORKERS,\n     REMOVE_WORKER\n  } from \"../Constants/Actions\";\nimport axios from \"axios\";\nimport { Dispatch } from \"redux\";\n\n\nexport interface WorkersIndividual {\n     name: string,\n     image: string,\n}\n\nexport interface Workers{\n     workers: WorkersIndividual,\n     error: string\n   }\n\n\n// Had this logic in place for a side project I am currently working on, So left it in here rather than using mock data.\n\nexport const getImages = () => (dispatch: Dispatch) => {\n     const words = [ 'face' ]\n     const apiKey = \"563492ad6f9170000100000138bfb0c81cc0430a8f1491f55451a0f6\"; \n     // NOTE: Would Normally Place This KEY in the Back End and surface that api url endppoint here\n\n     let allWorkers = [] as any\n     dispatch({ type: LOAD_IMAGES_PENDING });\n    \n     let reqs = words.map( word => {\n          return new Promise ((resolve, reject) => {\n               const url = `https://api.pexels.com/v1/search?query=${word}`\n               axios(url, {\n               method: 'GET',\n               headers: { 'Authorization' : apiKey }\n               })\n               .then(res => {\n                    resolve(res.data.photos)\n                    res.data.photos.map ( (photo: {photographer: string, src: {large: string}}, index: number) => {\n                         let workerIndividualData = {} as WorkersIndividual\n                         workerIndividualData.name = photo.photographer\n                         workerIndividualData.image = photo.src.large\n                         return allWorkers.push(workerIndividualData)\n                    })\n                         })\n               .catch(err => {\n                    reject(err)\n                    console.log(err)\n               })\n          })\n     })\n\n     Promise.all(reqs).then(() => {\n          dispatch({\n               type: LOAD_IMAGES_SUCCESS,\n               payload: allWorkers,\n            });\n     })\n     .catch((err) => {\n          console.log(err)\n          dispatch({\n               type: LOAD_IMAGES_FAIL,\n               payload: \"Unable To Retrieve Images\",\n            });\n     })\n  };\n\n  export const updateHiredWorkers = (workerName: string) => (dispatch: Dispatch) => {\n     dispatch({\n          type: UPDATE_HIRED_WORKERS,\n          payload: workerName\n     })\n  }\n  export const removeWorker = (workerName: string) => (dispatch: Dispatch) => {\n     dispatch({\n          type: REMOVE_WORKER,\n          payload: workerName\n     })\n  }\n","export default __webpack_public_path__ + \"static/media/bg.86e61508.jpeg\";","import React, {useEffect} from 'react'\nimport {useDispatch } from \"react-redux\";\nimport CastLibrary from './Components/CastLibrary'\nimport Background from './Assets/Images/bg.jpeg'\nimport { Container, CssBaseline } from '@mui/material';\nimport { getImages } from './Actions/Actions';\n\n\nconst App = () => {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getImages())\n  }, [dispatch])\n\n  return (\n      <Container maxWidth=\"sm\" sx={{backgroundImage: `url(${Background})`, backgroundSize: 'cover'}} >\n        <CssBaseline />\n        <CastLibrary \n          workers={[]} \n          isLoading={true}\n          error=''\n          hiredWorkers={[]}\n          removedWorkers={[]}\n        />\n      </Container> \n  );\n}\n\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { LOAD_IMAGES_FAIL, LOAD_IMAGES_PENDING, LOAD_IMAGES_SUCCESS, REMOVE_WORKER, UPDATE_HIRED_WORKERS } from '../Constants/Actions'\nimport { ImageState, WorkerState } from '../State/State'\n\nexport interface Action<T, P = {} > {\n     type: T;\n     payload: P;\n  }\nconst defaultState: ImageState = {\n     workers: [],\n     error: \"\",\n     isLoading: false,\n  };\n\nconst workersState: WorkerState = {\n     hiredWorkers: [],\n     removedWorkers: []\n}\n\nconst getImages = (state = defaultState, action: Action<string, any>): ImageState => {\n     switch(action.type){\n          case LOAD_IMAGES_PENDING:\n               return { ...state, isLoading: true, error: \"\" };\n          case LOAD_IMAGES_SUCCESS:\n               return { ...state, isLoading: false, workers: action.payload }\n          case LOAD_IMAGES_FAIL:\n               return {...state, isLoading: false, error: action.payload}\n          default:\n               return state\n     }\n}\n\nconst updateWorkers = (state = workersState, action: Action<String, any>): WorkerState => {\n     switch(action.type){\n          case UPDATE_HIRED_WORKERS: \n               return { ...state, hiredWorkers: [...state.hiredWorkers, action.payload] }\n          case REMOVE_WORKER:\n               return {...state, removedWorkers: [...state.removedWorkers, action.payload]}\n          default:\n               return state\n     }\n}\n\nexport { getImages, updateWorkers }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers} from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport {getImages, updateWorkers} from './Reducers/Reducer';\n\n\nconst rootReducer = combineReducers({getImages, updateWorkers}) ;\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunkMiddleware))\n);\n\n\nReactDOM.render(\n    <Provider store={store}>\n      <Router>\n        <App/>\n      </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}