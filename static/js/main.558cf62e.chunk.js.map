{"version":3,"sources":["reportWebVitals.ts","Constants/Actions.ts","Styles/Styles.ts","Components/WorkerCard.tsx","Components/CastLibrary.tsx","Actions/Actions.tsx","Assets/Images/bg.jpeg","App.tsx","Reducers/Reducer.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LOAD_IMAGES_PENDING","LOAD_IMAGES_SUCCESS","LOAD_IMAGES_FAIL","UPDATE_HIRED_WORKERS","REMOVE_WORKER","boxContainer","height","display","flexDirection","alignItems","justifyContent","pageTitle","fontVariantCaps","mt","workers","width","flexFlow","pb","hiredWorkers","overflow","text","textContainer","hiredContainer","p","position","mb","hiredWorkersText","m","fontSize","workerCardBox","backgroundSize","backgroundPosition","borderRadius","workerCardTextContainer","backgroundColor","borderBottomLeftRadius","borderBottomRightRadius","color","WorkerCard","worker","index","swiped","Box","sx","marginTop","mr","preventSwipe","onSwipe","direction","name","Paper","elevation","Styles","style","backgroundImage","image","Typography","variant","component","connect","state","getImages","isLoading","error","updateWorkers","removedWorkers","dispatch","useDispatch","workerName","type","payload","removeWorker","updateHiredWorkers","renderHiredWorkers","map","renderWorkers","renderWorkerFinished","Container","maxWidth","align","length","App","useEffect","allWorkers","reqs","word","Promise","resolve","reject","url","axios","method","headers","Authorization","res","data","photos","photo","workerIndividualData","photographer","src","large","push","catch","err","all","Background","CssBaseline","defaultState","workersState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"yLAgBeA,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,8DCXDQ,EAAsB,sBACtBC,EAAsB,sBACtBC,EAAmB,mBACnBC,EAAuB,uBACvBC,EAAgB,gB,iBCJhBC,EAAmB,CAC9BC,OAAQ,QACRC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,cAGLC,EAAe,CAC1BC,gBAAiB,kBACjBC,GAAI,GAGOC,EAAc,CACzBC,MAAO,OACPR,QAAS,OACTS,SAAU,SACVP,WAAY,SACZC,eAAgB,gBAChBJ,OAAQ,OACRO,GAAI,EACJI,GAAI,GAGOC,EAAmB,CAC9BX,QAAS,OACTS,SAAU,WACVN,eAAgB,SAChBD,WAAY,WACZH,OAAQ,IACRa,SAAU,UAGCC,EAAW,CACtBR,gBAAiB,kBACjBC,GAAI,GAGOQ,EAAoB,CAC/Bd,QAAS,OACTS,SAAU,SACVN,eAAgB,SAChBJ,OAAQ,QAGGgB,EAAqB,CAChCC,EAAG,EACHC,SAAU,SACVlB,OAAQ,IACRmB,GAAI,EACJV,MAAO,QAGIW,EAAuB,CAClCC,EAAG,EACHC,SAAU,QAiBCC,EAAoB,CAC/BL,SAAU,WACVlB,OAAQ,IACRS,MAAO,IACPe,eAAgB,QAChBC,mBAAoB,SACpBxB,QAAS,OACTS,SAAU,SACVN,eAAgB,WAChBsB,aAAc,QAGHC,EAA8B,CACzCC,gBAAiB,QACjBX,EAAG,EACHY,uBAAwB,OACxBC,wBAAyB,OACzBC,MAAO,S,OCtDMC,EAjBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAOC,EAAlB,EAAkBA,OAAlB,OACjB,cAACC,EAAA,EAAD,CAAKC,GAAI,CAAEnB,SAAU,WAAYoB,UAAmB,GAARJ,EAAaK,GAAY,GAARL,GAA7D,SACE,cAAC,IAAD,CACEM,aAAc,CAAC,KAAM,QACrBC,QAAS,SAACC,GAAD,OAAeP,EAAOO,EAAWT,EAAOU,OAFnD,SAIE,cAACC,EAAA,EAAD,CAAOC,UAAW,EAAGR,GAAI,CAAEpB,EAAG,EAAGS,aAAc,QAA/C,SACE,cAACU,EAAA,EAAD,CAAKC,GAAIS,EAAsBC,MAAO,CAAEC,gBAAgB,OAAD,OAASf,EAAOgB,MAAhB,MAAvD,SACE,cAACb,EAAA,EAAD,CAAKC,GAAIS,EAAT,SACE,cAACI,EAAA,EAAD,CAAYb,GAAIS,EAAaK,QAAQ,YAAYC,UAAU,QAA3D,SAAoEnB,EAAOU,kBCuFxEU,eARS,SAACC,GAAD,MAAyB,CAC/C9C,QAAS8C,EAAMC,UAAU/C,QACzBgD,UAAWF,EAAMC,UAAUC,UAC3BC,MAAOH,EAAMC,UAAUE,MACvB7C,aAAc0C,EAAMI,cAAc9C,aAClC+C,eAAgBL,EAAMI,cAAcC,kBAGE,KAAzBN,EA5FK,SAAC,GAEA,IADnB7C,EACkB,EADlBA,QAASgD,EACS,EADTA,UAAWC,EACF,EADEA,MAAO7C,EACT,EADSA,aAAc+C,EACvB,EADuBA,eAEnCC,EAAWC,cAEX1B,EAAS,SAACO,EAAmBoB,GACjCF,ECwCwB,SAACE,GAAD,OAAwB,SAACF,GACnDA,EAAS,CACPG,KAAMjE,EACNkE,QAASF,KD3CAG,CAAaH,IACJ,UAAdpB,GACFkB,ECgC4B,SAACE,GAAD,OAAwB,SAACF,GACzDA,EAAS,CACPG,KAAMlE,EACNmE,QAASF,KDnCEI,CAAmBJ,KAI1BK,EAAqBvD,EAAawD,KAAI,SAACnC,GAAD,OAC1C,cAACiB,EAAA,EAAD,CAAyBb,GAAIS,EAA7B,SAAuDb,GAAtCA,MAGboC,GAAiBb,GAAahD,EAAQ4D,KAAI,SAACnC,EAA0BC,GAA3B,OAC9C,cAAC,EAAD,CAEEA,MAAOA,EACPD,OAAQA,EACRE,OAAQA,GAHHF,EAAOgB,MAAQ,MAOlBqB,EACJ,cAAClC,EAAA,EAAD,CAAKC,GAAI,CAAE9B,GAAI,GAAf,SACE,cAAC2C,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKf,GAAIS,EAA5C,+BAIJ,OAAKU,GAAaC,EAEd,mCACE,eAACrB,EAAA,EAAD,CAAKW,MAAOD,EAAZ,UACE,cAACI,EAAA,EAAD,CAAYb,GAAIS,EAAkBK,QAAQ,KAAKC,UAAU,KAAzD,6BACA,cAAChB,EAAA,EAAD,CAAKC,GAAIS,EAAT,SACE,cAACI,EAAA,EAAD,CAAYb,GAAIS,EAAaK,QAAQ,KAAKC,UAAU,KAApD,SAA0DK,WAMhED,EAEA,mCACE,eAACpB,EAAA,EAAD,CAAKW,MAAOD,EAAZ,UACE,cAACI,EAAA,EAAD,CAAYb,GAAIS,EAAkBK,QAAQ,KAAKC,UAAU,KAAzD,6BACA,cAAChB,EAAA,EAAD,CAAKC,GAAIS,EAAT,SACE,cAACI,EAAA,EAAD,CAAYb,GAAIS,EAAaK,QAAQ,KAAKC,UAAU,KAApD,+BAQR,cAACmB,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACpC,EAAA,EAAD,CAAKW,MAAOD,EAAZ,UACE,cAACI,EAAA,EAAD,CAAYuB,MAAM,SAASpC,GAAIS,EAAkBK,QAAQ,KAAKC,UAAU,KAAxE,6BACA,cAAChB,EAAA,EAAD,CAAKC,GAAIS,EAAT,SACIa,EAAee,SAAWlE,EAAQkE,OAASJ,EAC3C,qCACGD,EACD,cAACjC,EAAA,EAAD,CAAKC,GAAI,CAAE9B,GAAI,IAAf,SACE,cAAC2C,EAAA,EAAD,CAAYb,GAAIS,EAAaK,QAAQ,YAAYC,UAAU,IAA3D,SAAgE,iEAKtExC,EAAa8D,OAAS,GAEP,eAAC9B,EAAA,EAAD,CAAOC,UAAW,EAAGR,GAAIS,EAAzB,UACE,cAACI,EAAA,EAAD,CAAYuB,MAAM,SAAlB,oBACA,cAACrC,EAAA,EAAD,CAAKC,GAAIS,EAAT,SACGqB,eEjGf,MAA0B,gCC4B1BQ,EArBO,WACpB,IAAMf,EAAWC,cAMjB,OAJAe,qBAAU,WACRhB,GFS2B,SAACA,GAC9B,IAIMiB,EAAa,CAAC,IACpBjB,EAAS,CAAEG,KAAMrE,IAEjB,IAAMoF,EAPQ,CAAC,YAOIV,KAAI,SAACW,GAAD,OAAU,IAAIC,SAAQ,SAACC,EAASC,GACrD,IAAMC,EAAG,iDAA6CJ,GACtDK,IAAMD,EAAK,CACTE,OAAQ,MACRC,QAAS,CAAEC,cAVA,8DAYVnG,MAAK,SAACoG,GACLP,EAAQO,EAAIC,KAAKC,QACjBF,EAAIC,KAAKC,OAAOtB,KAAI,SAACuB,GACnB,IAAMC,EAAuB,GAG7B,OAFAA,EAAqBjD,KAAOgD,EAAME,aAClCD,EAAqB3C,MAAQ0C,EAAMG,IAAIC,MAChClB,EAAWmB,KAAKJ,SAG1BK,OAAM,SAACC,GACNhB,EAAOgB,YAIblB,QAAQmB,IAAIrB,GAAM1F,MAAK,WACrBwE,EAAS,CACPG,KAAMpE,EACNqE,QAASa,OAGVoB,OAAM,WACLrC,EAAS,CACPG,KAAMnE,EACNoE,QAAS,sCE7CZ,CAACJ,IAGF,eAACW,EAAA,EAAD,CAAWC,SAAS,KAAKnC,GAAI,CAAEW,gBAAgB,OAAD,OAASoD,EAAT,KAAwB5E,eAAgB,SAAtF,UACE,cAAC6E,EAAA,EAAD,IACA,cAAC,EAAD,CACE7F,QAAS,GACTgD,WAAS,EACTC,MAAM,GACN7C,aAAc,GACd+C,eAAgB,S,gBCblB2C,EAA2B,CAC/B9F,QAAS,GACTiD,MAAO,GACPD,WAAW,GAGP+C,EAA4B,CAChC3F,aAAc,GACd+C,eAAgB,ICLZ6C,EAAcC,0BAAgB,CAAElD,UDQpB,WAAoE,IAAnED,EAAkE,uDAA1DgD,EAAcI,EAA4C,uCACnF,OAAQA,EAAO3C,MACb,KAAKrE,EACH,OAAO,2BAAK4D,GAAZ,IAAmBE,WAAW,EAAMC,MAAO,KAC7C,KAAK9D,EACH,OAAO,2BAAK2D,GAAZ,IAAmBE,WAAW,EAAOhD,QAASkG,EAAO1C,UACvD,KAAKpE,EACH,OAAO,2BAAK0D,GAAZ,IAAmBE,WAAW,EAAOC,MAAOiD,EAAO1C,UACrD,QACE,OAAOV,ICjBoCI,cDqB3B,WAAqE,IAApEJ,EAAmE,uDAA3DiD,EAAcG,EAA6C,uCACxF,OAAQA,EAAO3C,MACb,KAAKlE,EACH,OAAO,2BAAKyD,GAAZ,IAAmB1C,aAAa,GAAD,mBAAM0C,EAAM1C,cAAZ,CAA0B8F,EAAO1C,YAClE,KAAKlE,EACH,OAAO,2BAAKwD,GAAZ,IAAmBK,eAAe,GAAD,mBAAML,EAAMK,gBAAZ,CAA4B+C,EAAO1C,YACtE,QACE,OAAOV,MC3BPqD,EAAQC,sBACZJ,EACAK,8BAAoBC,0BAAgBC,OAGtCC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BlI,K","file":"static/js/main.558cf62e.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const LOAD_IMAGES_PENDING = 'LOAD_IMAGES_PENDING';\nexport const LOAD_IMAGES_SUCCESS = 'LOAD_IMAGES_SUCCESS';\nexport const LOAD_IMAGES_FAIL = 'LOAD_IMAGES_FAIL';\nexport const UPDATE_HIRED_WORKERS = 'UPDATE_HIRED_WORKERS';\nexport const REMOVE_WORKER = 'REMOVE_WORKER';\n","export const boxContainer: {} = {\n  height: '100vh',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'flex-start',\n};\n\nexport const pageTitle:{} = {\n  fontVariantCaps: 'all-petite-caps',\n  mt: 4,\n};\n\nexport const workers: {} = {\n  width: '100%',\n  display: 'flex',\n  flexFlow: 'column',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  height: '100%',\n  mt: 5,\n  pb: 1,\n};\n\nexport const hiredWorkers: {} = {\n  display: 'flex',\n  flexFlow: 'row wrap',\n  justifyContent: 'center',\n  alignItems: 'baseline',\n  height: 150,\n  overflow: 'scroll',\n};\n\nexport const text: {} = {\n  fontVariantCaps: 'all-petite-caps',\n  mt: 1,\n};\n\nexport const textContainer: {} = {\n  display: 'flex',\n  flexFlow: 'column',\n  justifyContent: 'center',\n  height: '100%',\n};\n\nexport const hiredContainer: {} = {\n  p: 1,\n  position: 'static',\n  height: 300,\n  mb: 4,\n  width: '100%',\n};\n\nexport const hiredWorkersText: {} = {\n  m: 1,\n  fontSize: '12px',\n};\n\nexport const cardPaper:{} = {\n  maxWidth: 150,\n  m: 1,\n  p: 1,\n  textAlign: 'center',\n};\n\nexport const cardBox: {} = {\n  height: 130,\n  width: 130,\n  backgroundColor: 'black',\n  overflow: 'hidden',\n};\n\nexport const workerCardBox: {} = {\n  position: 'relative',\n  height: 200,\n  width: 200,\n  backgroundSize: 'cover',\n  backgroundPosition: 'center',\n  display: 'flex',\n  flexFlow: 'column',\n  justifyContent: 'flex-end',\n  borderRadius: '25px',\n};\n\nexport const workerCardTextContainer: {} = {\n  backgroundColor: 'black',\n  p: 2,\n  borderBottomLeftRadius: '25px',\n  borderBottomRightRadius: '25px',\n  color: 'white',\n};\n","import React from 'react';\nimport { Box } from '@mui/system';\nimport TinderCard from 'react-tinder-card';\nimport { Paper, Typography } from '@mui/material';\nimport * as Styles from '../Styles/Styles';\n\nexport interface WorkerObj {\n     name: string,\n     image: string\n}\n\nexport interface WorkerCardProps {\n     key: string\n     worker: WorkerObj,\n     index: number,\n     swiped: (...args: any[]) => any\n}\n\nconst WorkerCard = ({ worker, index, swiped }: WorkerCardProps) => (\n  <Box sx={{ position: 'absolute', marginTop: index * 0.1, mr: index * 0.3 }}>\n    <TinderCard\n      preventSwipe={['up', 'down']}\n      onSwipe={(direction) => swiped(direction, worker.name)}\n    >\n      <Paper elevation={4} sx={{ p: 2, borderRadius: '30px' }}>\n        <Box sx={Styles.workerCardBox} style={{ backgroundImage: `url(${worker.image})` }}>\n          <Box sx={Styles.workerCardTextContainer}>\n            <Typography sx={Styles.text} variant=\"subtitle1\" component=\"label\">{worker.name}</Typography>\n          </Box>\n        </Box>\n      </Paper>\n    </TinderCard>\n  </Box>\n);\n\nexport default WorkerCard;\n","import React from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { Box } from '@mui/system';\nimport { Container, Paper, Typography } from '@mui/material';\nimport { ImageStateP } from '../State/State';\nimport { updateHiredWorkers, removeWorker } from '../Actions/Actions';\nimport WorkerCard from './WorkerCard';\nimport * as Styles from '../Styles/Styles';\n\nexport interface WorkersIndividual {\n     name: string,\n     image: string,\n}\n\nexport interface LibraryProps {\n     workers: [],\n     isLoading: boolean,\n     error: string,\n     hiredWorkers: [],\n     removedWorkers: []\n}\n\nconst CastLibrary = ({\n  workers, isLoading, error, hiredWorkers, removedWorkers,\n}: LibraryProps) => {\n  const dispatch = useDispatch();\n\n  const swiped = (direction: string, workerName: string) => {\n    dispatch(removeWorker(workerName));\n    if (direction === 'right') {\n      dispatch(updateHiredWorkers(workerName));\n    }\n  };\n\n  const renderHiredWorkers = hiredWorkers.map((worker) => (\n    <Typography key={worker} sx={Styles.hiredWorkersText}>{worker}</Typography>\n  ));\n\n  const renderWorkers = !isLoading && workers.map((worker:WorkersIndividual, index) => (\n    <WorkerCard\n      key={worker.image + 1}\n      index={index}\n      worker={worker}\n      swiped={swiped}\n    />\n  ));\n\n  const renderWorkerFinished = (\n    <Box sx={{ mt: 5 }}>\n      <Typography variant=\"h4\" component=\"h4\" sx={Styles.text}>No More Workers</Typography>\n    </Box>\n  );\n\n  if (!isLoading && error) {\n    return (\n      <>\n        <Box style={Styles.boxContainer}>\n          <Typography sx={Styles.pageTitle} variant=\"h2\" component=\"h1\">Pexel Film Cast</Typography>\n          <Box sx={Styles.textContainer}>\n            <Typography sx={Styles.text} variant=\"h3\" component=\"h3\">{error}</Typography>\n          </Box>\n        </Box>\n      </>\n    );\n  }\n  if (isLoading) {\n    return (\n      <>\n        <Box style={Styles.boxContainer}>\n          <Typography sx={Styles.pageTitle} variant=\"h2\" component=\"h1\">Pexel Film Cast</Typography>\n          <Box sx={Styles.textContainer}>\n            <Typography sx={Styles.text} variant=\"h3\" component=\"h3\">Loading...</Typography>\n          </Box>\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Box style={Styles.boxContainer}>\n        <Typography align=\"center\" sx={Styles.pageTitle} variant=\"h2\" component=\"h1\">Pexel Film Cast</Typography>\n        <Box sx={Styles.workers}>\n          { removedWorkers.length === workers.length ? renderWorkerFinished : (\n            <>\n              {renderWorkers}\n              <Box sx={{ mt: 35 }}>\n                <Typography sx={Styles.text} variant=\"subtitle1\" component=\"p\">{'<--- Swipe Left To Fire | Swipe Right To Hire --->'}</Typography>\n              </Box>\n            </>\n          ) }\n        </Box>\n        { hiredWorkers.length > 0\n                         && (\n                         <Paper elevation={1} sx={Styles.hiredContainer}>\n                           <Typography align=\"center\">Hired:</Typography>\n                           <Box sx={Styles.hiredWorkers}>\n                             {renderHiredWorkers}\n                           </Box>\n                         </Paper>\n                         )}\n      </Box>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state: ImageStateP) => ({\n  workers: state.getImages.workers,\n  isLoading: state.getImages.isLoading,\n  error: state.getImages.error,\n  hiredWorkers: state.updateWorkers.hiredWorkers,\n  removedWorkers: state.updateWorkers.removedWorkers,\n});\n\nexport default connect(mapStateToProps, null)(CastLibrary);\n","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport {\n  LOAD_IMAGES_FAIL,\n  LOAD_IMAGES_PENDING,\n  LOAD_IMAGES_SUCCESS,\n  UPDATE_HIRED_WORKERS,\n  REMOVE_WORKER,\n} from '../Constants/Actions';\n\nexport interface WorkersIndividual {\n     name: string,\n     image: string,\n}\n\nexport interface Workers{\n     workers: WorkersIndividual,\n     error: string\n   }\n\nexport const getImages = () => (dispatch: Dispatch) => {\n  const words = ['portrait'];\n  const apiKey = '563492ad6f9170000100000138bfb0c81cc0430a8f1491f55451a0f6';\n  // NOTE: Would Normally Place This KEY in the Back End and surface that api url endppoint here\n\n  const allWorkers = [{}];\n  dispatch({ type: LOAD_IMAGES_PENDING });\n\n  const reqs = words.map((word) => new Promise((resolve, reject) => {\n    const url = `https://api.pexels.com/v1/search?query=${word}`;\n    axios(url, {\n      method: 'GET',\n      headers: { Authorization: apiKey },\n    })\n      .then((res) => {\n        resolve(res.data.photos);\n        res.data.photos.map((photo: {photographer: string, src: {large: string}}) => {\n          const workerIndividualData = {} as WorkersIndividual;\n          workerIndividualData.name = photo.photographer;\n          workerIndividualData.image = photo.src.large;\n          return allWorkers.push(workerIndividualData);\n        });\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  }));\n\n  Promise.all(reqs).then(() => {\n    dispatch({\n      type: LOAD_IMAGES_SUCCESS,\n      payload: allWorkers,\n    });\n  })\n    .catch(() => {\n      dispatch({\n        type: LOAD_IMAGES_FAIL,\n        payload: 'Unable To Retrieve Images',\n      });\n    });\n};\n\nexport const updateHiredWorkers = (workerName: string) => (dispatch: Dispatch) => {\n  dispatch({\n    type: UPDATE_HIRED_WORKERS,\n    payload: workerName,\n  });\n};\nexport const removeWorker = (workerName: string) => (dispatch: Dispatch) => {\n  dispatch({\n    type: REMOVE_WORKER,\n    payload: workerName,\n  });\n};\n","export default __webpack_public_path__ + \"static/media/bg.86e61508.jpeg\";","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Container, CssBaseline } from '@mui/material';\nimport CastLibrary from './Components/CastLibrary';\nimport Background from './Assets/Images/bg.jpeg';\nimport { getImages } from './Actions/Actions';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getImages());\n  }, [dispatch]);\n\n  return (\n    <Container maxWidth=\"sm\" sx={{ backgroundImage: `url(${Background})`, backgroundSize: 'cover' }}>\n      <CssBaseline />\n      <CastLibrary\n        workers={[]}\n        isLoading\n        error=\"\"\n        hiredWorkers={[]}\n        removedWorkers={[]}\n      />\n    </Container>\n  );\n};\n\nexport default App;\n","import {\n  LOAD_IMAGES_FAIL, LOAD_IMAGES_PENDING, LOAD_IMAGES_SUCCESS, REMOVE_WORKER, UPDATE_HIRED_WORKERS,\n} from '../Constants/Actions';\nimport { ImageState, WorkerState } from '../State/State';\n\nexport interface Action<T, P = {} > {\n     type: T;\n     payload: P;\n  }\nconst defaultState: ImageState = {\n  workers: [],\n  error: '',\n  isLoading: false,\n};\n\nconst workersState: WorkerState = {\n  hiredWorkers: [],\n  removedWorkers: [],\n};\n\nconst getImages = (state = defaultState, action: Action<string, any>): ImageState => {\n  switch (action.type) {\n    case LOAD_IMAGES_PENDING:\n      return { ...state, isLoading: true, error: '' };\n    case LOAD_IMAGES_SUCCESS:\n      return { ...state, isLoading: false, workers: action.payload };\n    case LOAD_IMAGES_FAIL:\n      return { ...state, isLoading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst updateWorkers = (state = workersState, action: Action<string, any>): WorkerState => {\n  switch (action.type) {\n    case UPDATE_HIRED_WORKERS:\n      return { ...state, hiredWorkers: [...state.hiredWorkers, action.payload] };\n    case REMOVE_WORKER:\n      return { ...state, removedWorkers: [...state.removedWorkers, action.payload] };\n    default:\n      return state;\n  }\n};\n\nexport { getImages, updateWorkers };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport { getImages, updateWorkers } from './Reducers/Reducer';\n\nconst rootReducer = combineReducers({ getImages, updateWorkers });\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunkMiddleware)),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}